### sample 1
Check if two given strings are isomorphic to each other.Two strings str1 and str2 are called isomorphic if there is a one to one mapping possible for every character of str1 to every character of str2. And all occurrences of every character in ‘str1′ map to same character in ‘str2′.

Input:
The first line contains an integer T, depicting total number of test cases. Each test case contains two strings each in new line.
 

Output:
Print "1" if strings are isomorphic and "0" if not.
 

Constraints:
1<=T<=100
1<=Length of Strings<=1000

Example:
Input:
2
aab
xxy
aab
xyz

Output:
1
0

### sameLeetCode – Isomorphic Strings (Java)
 
Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t.

For example,"egg" and "add" are isomorphic, "foo" and "bar" are not.

Analysis

We can define a map which tracks the char-char mappings. If a value is already mapped, it can not be mapped again.

Java Solution
public boolean isIsomorphic(String s, String t) {
    if(s==null||t==null)
        return false;
 
    if(s.length()!=t.length())
        return false;
 
    HashMap<Character, Character> map = new HashMap<Character, Character>();
 
 
    for(int i=0; i<s.length(); i++){
        char c1 = s.charAt(i);
        char c2 = t.charAt(i);
 
        if(map.containsKey(c1)){
            if(map.get(c1)!=c2)// if not consistant with previous ones
                return false;
        }else{
            if(map.containsValue(c2)) //if c2 is already being mapped. Time complexity O(n) here
                return false;
            map.put(c1, c2);
        }
    }
 
    return true;
}
Time complexity is O(n*n).

### sample 3
An Efficient Solution can solve this problem in O(n) time. The idea is to create an array to store mappings of processed characters.

1) If lengths of str1 and str2 are not same, return false.
2) Do following for every character in str1 and str2
   a) If this character is seen first time in str1, 
      then current of str2 must have not appeared before.
      (i) If current character of str2 is seen, return false.
          Mark current character of str2 as visited.
      (ii) Store mapping of current characters.
   b) Else check if previous occurrence of str1[i] mapped
      to same character.
Below is the implementation of above idea :
